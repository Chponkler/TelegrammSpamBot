from telethon import TelegramClient
import os
from itertools import cycle
import asyncio

api_id = 20403628  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à
api_hash = 'a82bd42ad21f9790880449d637b6aec5'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à
phone_number = '+797122301213'  # –í–∞—à –Ω–æ–º–µ—Ä
images_folder = ''#–ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–∫–∞–º–∏
recipients = ['@bebro228','@susic'] # –ú–æ–∂–Ω–æ —é–∑–µ—Ä–Ω–µ–π–º# –ò–ª–∏ ID —á–∞—Ç–∞ (—á–∏—Å–ª–æ)# –ò–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö)

client = TelegramClient('session_name', api_id, api_hash)

message_after_photo="–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ"
message_before_photo="–¢–µ–∫—Å—Ç –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç –±–æ—Ç–∞"

async def send_images():
    images = [
        f for f in os.listdir(images_folder)
        if f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif'))
    ]

    if not images:
        print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ!")
        return

    for recipient in recipients:
        await client.send_message(recipient, message_before_photo)

    image_cycle = cycle(images)
    for recipient in recipients:
        print(f"\nüîÑ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è {recipient}...")

        for i in range(50):
            img = next(image_cycle)
            img_path = os.path.join(images_folder, img)

            try:
                await client.send_file(recipient, img_path)
                print(f"‚úÖ [{recipient}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {i + 1}/50: {img}")

                await client.send_message(recipient, message_after_photo)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {img} –¥–ª—è {recipient}: {e}")

            await asyncio.sleep(1)

with client:
    client.loop.run_until_complete(send_images())
